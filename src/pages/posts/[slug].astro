---
import { getCollection, getEntry, render } from "astro:content";
import Layout from "../../layouts/default.astro";
import { formatDate } from "../../utils/date";
import { Image } from "astro:assets";
import Badge from "../../components/ui/badge.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((entry) => ({
    params: { slug: entry.slug },
  }));
}

const { slug } = Astro.params;
const entry = await getEntry("blog", slug);

if (!entry) {
  return { notFound: true };
}

const { Content } = await render(entry);

const post = entry.data;
const content = Content;
---

<Layout title={post.title} description={post.description}>
  <div class="bg-gray-50 min-h-screen">
    <div class="bg-gradient-to-br from-teal-50 to-white py-12">
      <div class="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          {post.category && (
            <Badge class="mb-4 bg-teal-800 text-white">
              {post.category}
            </Badge>
          )}
          <h1
            class="mb-6 text-xl md:text-3xl font-bold text-gray-900 sm:text-5xl lg:text-6xl leading-tight"
          >
            {post.title}
          </h1>
          <p
            class="mb-8 text-lg md:text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed"
          >
            {post.description}
          </p>

          <div
            class="flex flex-wrap items-center justify-center gap-x-6 gap-y-3"
          >
            <div class="flex items-center">
              <div
                class="mr-3 h-12 w-12 overflow-hidden rounded-full bg-gray-100 ring-2 ring-teal-100"
              >
                <Image
                  src={
                    post.author.avatar ||
                    "/placeholder.svg?height=48&width=48"
                  }
                  alt={post.author.name}
                  class="h-full w-full object-cover"
                  width={48}
                  height={48}
                />
              </div>
              <div class="text-left">
                <div class="font-semibold text-gray-900">
                  {post.author.name}
                </div>
              </div>
            </div>
            <span class="text-gray-300">•</span>
            <time
              datetime={post.publishDate.toISOString()}
              class="text-gray-600 font-medium"
            >
              {formatDate(post.publishDate)}
            </time>
            <span class="text-gray-300">•</span>
            <span class="text-teal-800 font-medium">{post.readingTime}</span>
          </div>
        </div>
      </div>
    </div>

    {post.imageUrl && (
      <div class="mx-auto max-w-5xl px-4 sm:px-6 lg:px-8 -mt-8">
        <div class="overflow-hidden rounded-2xl shadow-2xl">
          <Image
            src={post.imageUrl}
            alt={post.title}
            class="w-full h-[400px] lg:h-[500px] object-cover"
            width={1200}
            height={500}
          />
        </div>
      </div>
    )}

    <div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
      <article class="bg-white rounded-2xl shadow-sm p-8 lg:p-12">
        <div class="prose prose-lg prose-teal max-w-none">
          <!-- Utilisation de <Content> pour rendre le Markdown/MDX -->
          <Content content={content} />
        </div>
      </article>
    </div>
  </div>
</Layout>